- key: owning-the-orbit-chain
  title: Owning the Orbit Chain
  shortTitle: Orbit Ownership
  details: >-
    ## Orbit Licensing 

    The licensing for Arbitrum Orbit chains is designed to provide both security
    and flexibility for developers using the Arbitrum Nitro codebase. When you
    create an Orbit chain, you receive a license that is both perpetual, meaning
    it cannot be revoked, and recursive, allowing your Orbit chain to host
    further chains under the same licensing terms. This ensures that once you've
    developed your Orbit chain, you retain unfettered and ongoing access to the
    software, and you can extend these rights to additional chains created
    within your Orbit chain's ecosystem.


    However, this license applies specifically to chains that settle to an
    Arbitrum-DAO-governed chain. If you wish to establish an independent Layer 2
    chain on Ethereum that does not settle to an Arbitrum-DAO chain, you must
    obtain a separate license. For this, you have two avenues:


    **1. Offchain Labs**: You can directly request a custom license from
    Offchain Labs, the original developers of the Arbitrum Nitro codebase and
    the primary licensor.


    **2. Arbitrum DAO Proposal**: Alternatively, you can submit a proposal to
    the Arbitrum DAO, which has been granted co-licensor rights. The DAO will
    then make a democratic decision on whether to grant a license for your new
    L2 chain.


    ## How to customize your Orbit chain's deployment configuration?

    To customize your Orbit chain's configuration, follow these steps when you
    access the Orbit chain deployment portal:


    ### Step1: Access the Deployment Portal

    Navigate to the Orbit chain deployment portal where you'll launch your new
    Orbit chain. You will encounter a form with various configuration fields.
    This form typically comes with default values that are suitable for many
    cases but can be customized.


    ### Step 2: Update Information

    For devnets, the Chain ID is automatically assigned and isn't crucial. In
    production, you'll choose a unique integer identifier that hasnâ€™t been used
    on chain indexes like Chainlist.org. Enter a distinctive name for your Orbit
    chain that is easily recognizable to your users and developers.


    ### Step 3: Customise Specifications

    Decide on the Challenge period in blocks, balancing the time validators have
    to dispute states against the withdrawal delay for users. This is measured
    in blocks of the underlying L1 chain. Specify the token for validators to
    use as a stake, using the token's contract address on the L2 chain to which
    your Orbit chain settles, or use the address for ETH if that's the chosen
    stake token. Set the Base stake amount, considering that a lower stake
    lowers the barrier to entry but may increase vulnerability to attacks, while
    a higher stake deters attacks but raises the barrier to validator
    participation.


    ### Step 4: Owner

    Provide the account address that will own and manage the Orbit chain's base
    contracts. In a production environment, this address might be governed by a
    DAO or a multisig, but for a devnet, it can be a standard Ethereum wallet
    address. Carefully review the default values and modify them based on the
    needs and security considerations of your project. Once you've finalized the
    configuration values, proceed with the deployment, ensuring that the Owner
    address has sufficient ETH to cover gas costs for contract deployment on L2.


    By customizing these settings, you can tailor your Orbit chain to the
    specific requirements of your application, balancing security,
    participation, and administrative control according to your project's needs.
- key: how-to-launch-an-orbit-chain
  shortTitle: Launching Chain
  details: >-
    ## Steps to launch an Orbit Chain


    ### Prerequisites


    - Docker


    - A browser-based Ethereum wallet (like MetaMask)


    - At least 1.5 testnet ETH


    ### Step 1: Aqcuire Arbitrum Testnet $ETH

    To initiate your Orbit chain, a minimum of 1.5 testnet ETH is required to
    fund the deployment of the foundational contracts to the chosen base chain,
    which can be either Arbitrum Goerli or Sepolia. With Sepolia being the
    preferred choice due to the planned obsolescence of Goerli, you should
    secure your testnet ETH from an Ethereum Layer 1 faucet for either Goerli or
    Sepolia. Once obtained, you can transfer your L1 testnet ETH to the
    corresponding Arbitrum Layer 2 testnet through the Arbitrum bridge.


    ### Step 2: Choose Chain Type: Anytrust vs Roll up

    Arbitrum Rollup ensures a secure, open validation process by storing data on
    Ethereum L1, while Arbitrum AnyTrust reduces fees through a trusted Data
    Availability Committee managing data off-chain. Rollup chains are
    recommended for highly secure applications such as DeFi platforms, while
    AnyTrust is better suited for transaction-intensive applications like games
    and social dApps that prioritize lower fees. Then Configure the orbit
    chain's deployment using the step by step guide available in the previous
    slide.


    ### Step 3: Configure Validators and batch Poster

    In the Configure Validators section of the Orbit chain deployment, you'll
    specify the number of validators and their addresses for your chain. The
    first validator's address is auto-generated, with its private key saved in a
    configuration file. These validators will ensure transaction integrity and
    manage the state of your Orbit chain on the base chain. They will be
    included in an allow-list on your chain's base contract, granting them
    permission to stake and validate. The terms "base contracts" and "base
    chain" refer to the L2 contracts of your Orbit chain and the L2 network
    they're deployed on, respectively. After setting up validators, you'll move
    on to configure the batch poster. In the Configure Batch Poster section, an
    address for the batch poster will be auto-generated, responsible for posting
    transaction batches from your Orbit chain to its base chain's contracts. Its
    private key is also auto-generated and stored in a JSON configuration file.
    After configuring this address, you proceed to the next deployment phase of
    your Orbit chain.


    ### Step 4: Deploye Orbit Chain

    To deploy your Orbit chain's base contracts, click the Deploy button on the
    configuration form, which prompts a transaction submission to the Arbitrum
    Goerli or Sepolia testnet from your wallet, incurring a minor gas fee
    payable in testnet ETH. This action deploys your chain's base contracts
    through an Orbit factory contract on Arbitrum's L2 testnet, which sets up
    your chain's infrastructure for transaction processing, staking, and other
    critical operations. After completing this transaction, you'll either move
    to configure a keyset for an AnyTrust chain or proceed to download
    configuration files to launch your chain, depending on your chosen chain
    type.


    ### Step 5: Keysets Configuration (Anytrust Only)

    The Batch Poster's functionality hinges on activating a keyset in the
    SequencerInbox contract, using keyset and hash binaries. For Orbit AnyTrust
    chains, an initial keyset is generated and linked to the SequencerInbox
    during deployment. Post-deployment, completing a transaction with a gas fee
    on the Arbitrum testnet redirects you to a download page to advance your
    chain's setup.


    ### Step 6: Set Up Orbit Chain's Local Development Environment

    After deploying your Orbit chain, you'll be presented with two JSON
    configurations: Rollup Config and L3 Config. You should download both:


    1. **Rollup Config**: Saves as `nodeConfig.json`, containing your chain's
    node settings and the private keys for the validator and batch poster to
    sign transactions.


    2. **L3Config**: Saves as `orbitSetupScriptConfig.json`, holding your
    chain's overall settings, including those for Token Bridge contracts.


    Next, to set up your local environment:


    1. Clone the `orbit-setup-script` repository from GitHub.

    2. Place the `nodeConfig.json` file into the `config` directory of the
    cloned repository.

    3. Similarly, move the `orbitSetupScriptConfig.json` file into the `config`
    directory.

    4. Install necessary dependencies by executing `yarn install` in the
    repository's root directory. 


    ### Step 7: Finish Setting up Chain

    Start Docker and execute `docker-compose up -d` in the orbit-setup-script
    repository's root directory to initiate a Nitro node and BlockScout
    explorer. You can then navigate to `http://localhost:4000/` to interact with
    the BlockScout explorer, enabling you to inspect transactions and blocks on
    your chain for debugging purposes. A provided Hardhat script automates
    several setup tasks, including funding validator and batch-poster accounts,
    depositing ETH through the bridge, deploying Token Bridge contracts, and
    setting chain parameters. Execute this script from the orbit-setup-script
    repository's root, substituting `0xYourPrivateKey` with your Owner account's
    private key and the local RPC URL with your node's. 


    - For Arbitrum Goerli, use

    `PRIVATE_KEY="0xYourPrivateKey"
    L2_RPC_URL="https://goerli-rollup.arbitrum.io/rpc"
    L3_RPC_URL="http://localhost:8449" yarn run setup`. 


    - For Arbitrum Sepolia, 

    `PRIVATE_KEY="0xYourPrivateKey"
    L2_RPC_URL="https://sepolia-rollup.arbitrum.io/rpc"
    L3_RPC_URL="http://localhost:8449" yarn run setup`.
  title: How to launch an Orbit Chain?
