{
  "key": "dodao-course-template",
  "title": "Introduction to Arbitrum",
  "summary": "This is a course that provides a deeper understanding into the working and technicalities of Arbitrum, the leading scalability solution for Ethereum.",
  "details": "",
  "duration": "30 mins - 1 hour",
  "highlights": [
    "Introduction",
    "Arbitrum Nitro",
    "Arbitrum One",
    "Arbitrum Nova",
    "Arbitrum Orbit",
    "Arbitrum Stylus"
  ],
  "publishStatus": "Live",
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/courses/DoDAO/CourseIcons/audit_and_monitoring.png",
  "courseAdmins": [
    "0x34d014758297c00fea49935fce172677904d51ef",
    "0x2a6af0619be90d129ab0d70c10e25c097b6ec67d"
  ],
  "topicConfig": {
    "showExplanations": true,
    "showHints": true
  },
  "topics": [
    {
      "title": "Introduction",
      "key": "introduction",
      "details": "Smart contract auditing is the process of reviewing and testing the source code of a smart contract to identify any potential vulnerabilities or security issues. This can include checking for errors in the code, evaluating the contract's overall design and architecture, and testing the contract's functionality to ensure that it performs as intended. The goal of a smart contract audit is to ensure that the contract is secure and reliable, and that it will function as intended when deployed on a blockchain network.\n\n",
      "order": 0,
      "explanations": [
        {
          "key": "arbiturm-optimistic-rollup",
          "shortTitle": "Optimistic Rollup",
          "details": "## Roll Ups\nRollups are a type of Layer 2 scaling solution that execute transactions outside the main Ethereum chain (off-chain) but record transaction data on the main chain (on-chain). The core idea is to \"roll up\" or batch many transactions into a single one, which is then posted to the main chain. This reduces the amount of data that needs to be stored and processed on the main chain, significantly increasing throughput and reducing transaction fees.\n\n### Types of Roll ups\nThere are two main types of rollups, each with its own approach to validating the batched transactions:\n\n#### Optimistic Rollups\nThese operate on the principle that all transactions are assumed to be valid by default. They only execute transaction computations on-chain in the event of a challenge. This means that instead of performing computation to prove the correctness of transactions upfront, Optimistic Rollups post the transactions along with a bond. After a challenge period, if no one disputes the transaction batch with a \"fraud proof\" showing that something was wrong, the transactions are considered valid. This method allows for significant scaling benefits, but the challenge period can introduce a delay in finalizing transactions.\n\n#### Zero-Knowledge Rollups (ZK-Rollups)\nZK-Rollups bundle transactions and generate a cryptographic proof, known as a zero-knowledge proof (specifically, a zk-SNARK or zk-STARK), attesting to their validity. This proof is then posted to the main chain, where it can be quickly verified. Because the validity of the entire batch can be confirmed without executing the transactions individually, ZK-Rollups can finalize transactions much more quickly than Optimistic Rollups. Additionally, ZK-Rollups enhance privacy since the actual transaction data can be kept off-chain.\n\n## Optimistic Rollup; How it works?\nOptimistic Rollups operates on the assumption that all transactions are honest and valid unless proven otherwise. Here's how they work:\n\n#### Step 1: Execution and Aggregation\nIn optimistic rollups, operators, or validators, process transactions by aggregating and compressing them before submitting them to Ethereum's blockchain. Any user can act as a validator by providing a bond, similar to proof-of-stake systems, and risks penalties for any invalid submissions. Validators also maintain their version of the rollup's state and can issue fraud proofs if discrepancies arise. Some rollups use a 'sequencer' instead of multiple validators, which centralizes transaction processing and submission but provides greater control over transaction order and immediate access to the rollup chain.\n\n#### Step 2: Sending Roll up Blocks to Ethereum\nOperators consolidate multiple off-chain transactions into a single batch and compress the transaction data to minimize storage costs on Ethereum. This batch is then submitted to Ethereum as 'calldata' â€” a temporary and immutable form of data used by smart contracts to execute functions. While 'calldata' remains in the blockchain's history, it does not become part of the Ethereum state, thereby conserving space and reducing costs. The 'calldata' keyword in Solidity is instrumental in calling smart contract functions and organizing inputs, playing a critical role in the efficient operation of optimistic rollups. \n\n#### Step 3: State Commitments\nState commitments play a crucial role in maintaining the integrity of the system. The state is structured as a Merkle tree, also known as the state tree, which contains all the information about the current state of the rollup. Operators compute new state roots reflecting the latest state changes and submit these roots to the rollup contract on Ethereum. By committing to the old and new state roots when posting transaction batches, and including the Merkle root for transactions, operators provide a verifiable record of the rollup's state changes on the Layer 1 blockchain. This mechanism ensures that the state of the rollup can be trusted and verified.\n\n#### Step 4: Fraud Proof \nThe essence of optimistic rollups lies in their fraud-proof mechanism. They allow blocks to be published without immediate validity checks. If discrepancies are suspected, users can challenge transitions within a set timeframe. Challenges trigger fraud-proof calculations, where disputed transactions are replayed on Ethereum's main network through a verifier contract. If fraud is confirmed, the responsible validator is penalized. To support this, rollups must make detailed state commitments and transaction data public on-chain, which incurs gas fees. Multi-round interactive proofs can enhance this process's efficiency by reducing the data and computation required for each verification step.\n\n#### Step 5: Multiround Interactive Proving\nMulti-round interactive proving is a critical component of optimistic rollups. It involves a dialogue between a challenger and the block's producer (asserter/operator), overseen by a Layer 1 verifier contract. If a block is challenged, the operator splits the disputed assertion for the rollup block into two, with each part undergoing repeated division through a bisection protocol until the specific point of contention is isolated. The verifier contract then adjudicates the dispute and identifies any fraudulent activity. This process ensures that only valid transactions are finalized, with the capability to penalize malicious actors, thereby maintaining the integrity of the rollup.  ",
          "title": "Arbiturm - Optimistic Rollup"
        },
        {
          "key": "arbitrum-chains",
          "shortTitle": "Types of Chains",
          "details": "Arbitrum ecosystem consists of various chains with distinct features that utilise unique technologies that enable ethereum scalability. The major arbitrum chains include.\n\n### Arbitrum One\nArbitrum One is a Layer 2 optimistic rollup solution that enhances Ethereum blockchain. It doesn't require any additional trust beyond that which is inherent to Ethereum's Layer 1. Enabled by the Nitro technology stack, Arbitrum One features efficient data handling and execution, improved transaction compression, and compatibility with Ethereum's gas system, streamlining the process while keeping security tight.\n\n### Arbitrum Nova\nArbitrum Nova is a Layer 2 scaling solution designed for high performance and cost efficiency. It operates on the AnyTrust protocol, which is a slightly less trustless system compared to Arbitrum One's Rollup protocol. The primary distinction lies in the AnyTrust protocol's reliance on a Data Availability Committee (DAC) to manage transaction data. This committee ensures the speedy and efficient handling of Level 2 transaction data before it is finalized on Ethereum's main chain. Arbitrum Nova is tailored for applications where high throughput and affordability are prioritized.\n\n### Arbitrum Orbit\nArbitrum Orbit allows the creation of personalized chains that settle transactions to Arbitrum's Layer 2 chains, such as Arbitrum One or Arbitrum Nova. You have full control over your Orbit chain, with the ability to tailor its privacy settings, permissions, governance structure, and fee token according to your specific requirements. Orbit chains can be as open or restricted as you prefer, offering a customizable path to decentralization and the option to integrate ongoing enhancements from the Arbitrum Nitro technology stack\n\n## How is arbiturm diferent from other Optimistic L2 Rollups?\nArbitrum's approach prioritizes a balance of speed, cost, security, and developer accessibility, underpinning its leading market position. Some of the major differences include:\n\n### Fraud Proofs\nArbitrum sets itself apart from other Optimistic L2 Rollups primarily through its multi-round fraud proof system, which contrasts with single-round fraud proofs used by platforms like Optimism. This system verifies only challenged transactions, which may result in lower fees due to decreased reliance on Layer 1 computations.\n\n### Virtual Machine Compatibility\nThe Arbitrum Virtual Machine (AVM) is more closely optimized for EVM coding languages, making it developer-friendly as applications don't need to be rewritten to transition from the EVM to the AVM. This contrasts with Optimism's Virtual Machine (OVM), which has faced some compatibility issues with the EVM.\n\n### Transaction Finality and Fees\nDue to the multi-round fraud proof mechanism, transaction finality on Arbitrum can be slower compared to some other rollups, but this trade-off allows for lower fees because of reduced Layer 1 computation relianceâ€‹.",
          "title": "Arbitrum Chains"
        }
      ],
      "questions": [],
      "readings": [],
      "summaries": []
    },
    {
      "key": "arbitrum-nitro",
      "title": "Arbitrum Nitro",
      "details": "write it doenjkjsdj;ao;isfjsdeo'fk'pfl;dlv,.",
      "explanations": [],
      "readings": [],
      "summaries": [],
      "questions": []
    },
    {
      "key": "arbitrum-one",
      "title": "Arbitrum One",
      "details": "xashdlwiudjio;wdksmow",
      "explanations": [],
      "readings": [],
      "summaries": [],
      "questions": []
    },
    {
      "key": "arbitrum-nova",
      "title": "Arbitrum Nova",
      "details": "jkwdnlwjekdnaiofkldnme.f/",
      "explanations": [],
      "readings": [],
      "summaries": [],
      "questions": []
    },
    {
      "key": "arbitrum-orbit",
      "title": "Arbitrum Orbit",
      "details": "saldhaiadjiokwfml,elfe",
      "explanations": [],
      "readings": [],
      "summaries": [],
      "questions": []
    },
    {
      "key": "arbitrum-stylus",
      "title": "Arbitrum Stylus",
      "details": "s,jdbaeljkfdnkoelf/melrf",
      "explanations": [],
      "readings": [],
      "summaries": [],
      "questions": []
    }
  ]
}